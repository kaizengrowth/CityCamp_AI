name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/deploy-ec2.yml'
      - 'backend/**'
      - 'frontend/**'

env:
  AWS_REGION: us-east-2
  EC2_INSTANCE_ID: i-064bae777595abb88

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        python -m pytest ../tests/backend/ -v --cov=app --cov-report=xml

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    environment: AWS
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.9.0

    - name: Terraform Format Check
      run: |
        cd aws/terraform
        terraform fmt -check

    - name: Terraform Init
      run: |
        cd aws/terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd aws/terraform
        terraform validate

    - name: Terraform Plan
      env:
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        TF_VAR_repository_url: ${{ github.server_url }}/${{ github.repository }}.git
      run: |
        cd aws/terraform
        terraform plan -no-color -input=false

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: AWS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.9.0

    - name: Terraform Init
      run: |
        cd aws/terraform
        terraform init

    - name: Terraform Plan
      env:
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        TF_VAR_repository_url: ${{ github.server_url }}/${{ github.repository }}.git
      run: |
        cd aws/terraform
        terraform plan -input=false -out=tfplan

    - name: Terraform Apply
      env:
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        TF_VAR_repository_url: ${{ github.server_url }}/${{ github.repository }}.git
      run: |
        cd aws/terraform
        terraform apply -auto-approve tfplan

  deploy-to-ec2:
    name: Deploy Application to EC2
    runs-on: ubuntu-latest
    needs: [test, terraform-apply]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: AWS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to EC2 via SSM
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --region ${{ env.AWS_REGION }} \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "GitHub Actions Deployment" \
          --parameters 'commands=[
            "#!/bin/bash",
            "set -e",
            "cd /opt/citycamp-ai",
            "sudo docker stop $(sudo docker ps -aq) || true",
            "sudo docker rm $(sudo docker ps -aq) || true",
            "rm -rf CityCamp_AI || true",
            "git clone https://github.com/${{ github.repository }}.git CityCamp_AI",
            "cd CityCamp_AI",
            "git checkout ${{ github.sha }}",
            "cd backend",
            "sudo docker build -t citycamp-backend:${{ github.sha }} .",
            "sudo docker run -d -p 8000:8000 --name citycamp_backend --restart unless-stopped citycamp-backend:${{ github.sha }}",
            "sleep 10",
            "curl http://localhost:8000/health || echo Backend starting...",
            "echo Deployment completed at $(date)"
          ]' \
          --query 'Command.CommandId' \
          --output text)

        echo "Deployment command sent. Command ID: $COMMAND_ID"

        # Wait for deployment to complete
        for i in {1..12}; do
          sleep 10
          STATUS=$(aws ssm get-command-invocation \
            --region ${{ env.AWS_REGION }} \
            --command-id $COMMAND_ID \
            --instance-id ${{ env.EC2_INSTANCE_ID }} \
            --query 'Status' \
            --output text 2>/dev/null)

          echo "Deployment status: $STATUS"

          if [ "$STATUS" = "Success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "‚ùå Deployment failed!"
            aws ssm get-command-invocation \
              --region ${{ env.AWS_REGION }} \
              --command-id $COMMAND_ID \
              --instance-id ${{ env.EC2_INSTANCE_ID }} \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
        done

    - name: Test deployment
      run: |
        # Test the application endpoints
        sleep 30  # Give app time to fully start
        curl -f http://localhost/health || echo "Health check failed"

    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ EC2 Deployment successful!"
        echo "Check your domain configuration for frontend and API access"
        echo "Health endpoint should be accessible at your configured domain/health"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå EC2 Deployment failed!"
        echo "Check the logs above for details."
