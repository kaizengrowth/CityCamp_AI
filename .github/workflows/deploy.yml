name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - 'aws/terraform/**'
      - '.github/workflows/deploy.yml'
      - 'backend/**'
      - 'frontend/**'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_BACKEND: citycamp-ai-backend
  ECR_REPOSITORY_FRONTEND: citycamp-ai-frontend
  ECS_SERVICE: citycamp-ai-backend
  ECS_CLUSTER: citycamp-ai-cluster
  S3_BUCKET: citycamp-ai-frontend-ru8nls0c
  CLOUDFRONT_DISTRIBUTION_ID: E18KZSTFG2SA46

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        cd backend
        python -m pytest ../tests/backend/ -v --cov=app --cov-report=xml

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    environment: AWS
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.9.0

    - name: Terraform Format Check
      run: |
        cd aws/terraform
        terraform fmt -check

    - name: Terraform Init
      run: |
        cd aws/terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd aws/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd aws/terraform
        terraform plan -detailed-exitcode -no-color -input=false -out=tfplan
      continue-on-error: true

    - name: Comment PR with Terraform Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan 📖

          Terraform plan has been executed. Please check the workflow logs for details.

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          } catch (error) {
            console.log('Error creating comment:', error.message);
          }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: AWS
    outputs:
      terraform-changed: ${{ steps.plan.outputs.exitcode }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.9.0

    - name: Terraform Format Check
      run: |
        cd aws/terraform
        terraform fmt -check

    - name: Terraform Init
      run: |
        cd aws/terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd aws/terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd aws/terraform
        terraform plan -detailed-exitcode -no-color -input=false -out=tfplan
        echo "exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Terraform Apply
      if: steps.plan.outputs.exitcode == '2'
      run: |
        cd aws/terraform
        terraform apply -auto-approve tfplan

  build-and-test-pr:
    name: Build and Test (PR)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    environment: AWS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      run: |
        docker build -t test-image:${{ github.sha }} -f backend/Dockerfile.prod backend/
        echo "✅ Docker image builds successfully"

  build-and-deploy-main:
    name: Build and Deploy (main branch)
    runs-on: ubuntu-latest
    needs: [test, terraform-apply]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: AWS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push backend image
        docker build -f backend/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
        docker build -f backend/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ env.S3_BUCKET }} --delete

        # Set correct content types
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.html" --content-type "text/html" --metadata-directive REPLACE
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.css" --content-type "text/css" --metadata-directive REPLACE
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.js" --content-type "application/javascript" --metadata-directive REPLACE
        aws s3 cp s3://${{ env.S3_BUCKET }} s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.json" --content-type "application/json" --metadata-directive REPLACE

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws/ecs/task-definition.json
        container-name: backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Deployment successful!"
        echo "Frontend: https://d1s9nkkr0t3pmn.cloudfront.net"
        echo "Backend: ECS service updated with image ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
